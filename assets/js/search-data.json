{
  
    
        "post0": {
            "title": "Part 1: Getting data from HackerNews",
            "content": "Where is the data ? . I had two options - either download the news data from HN using their API or get a (near) up-to-date dump via Kaggle. Yes! Kaggle is not just for getting into the world of competitive ML coding. It is a fabulous resource for a broad variety of structured datasets. Here is the link for - HN data. . . The header image says it has posts from 2006 to late 2017. But if you look inside the data tables you will find that it has data upto the current week. Current day and up to a couple previous days may not be in it. You will have to use the HN API to get that - but more on that later. For now all the HN data upto current minus two days will suffice. . Using Google&#39;s BigQuery to access the data source . We will write some SQL queries to explore the data, save it to the Kaggle&#39;s working directory. You get a (generous) 5GB of space in your working directory! That&#39;s where I will put HN data. Later, I will show you a nifty trick to download that data to your data processing machine. . First - fire up a Kaggle notebook. Start coding! . import pandas as pd from google.cloud import bigquery # Create a &quot;Client&quot; object client = bigquery.Client() . Our SQL client is ready. . Now lets&#39;s explore the HN dataset a bit. . query = &quot;&quot;&quot; SELECT COUNT(*) FROM bigquery-public-data.hacker_news.full WHERE type = &#39;story&#39; AND title IS NOT NULL; &quot;&quot;&quot; # Set up the query query_job = client.query(query) # API request - run the query, and return a pandas DataFrame query_job.to_dataframe() . Output: . f0_ . 0 | 3524454 | . So - there are about 3M rows of the type &#39;story&#39; that have a non-empty title. Why do we care about the title ? Well - we will be using the title field alone to build the news catalogue. . Let&#39;s see some rows. . query = &quot;&quot;&quot; SELECT * FROM bigquery-public-data.hacker_news.full WHERE type = &#39;story&#39; LIMIT 10; &quot;&quot;&quot; # Set up the query query_job = client.query(query) # API request - run the query, and return a pandas DataFrame query_job.to_dataframe() . . What is the lastest row in this table ? Lets find out! . query = &quot;&quot;&quot; SELECT MAX(timestamp) FROM bigquery-public-data.hacker_news.full WHERE type = &#39;story&#39; AND DATE(timestamp) &gt; &#39;2020-05-01&#39;; &quot;&quot;&quot; # Set up the query query_job = client.query(query) # API request - run the query, and return a pandas DataFrame query_job.to_dataframe() . I ran the query on 2020-05-20 9:30 p.m. IST. Here was the output: . f0_ . 0 | 2020-05-19 11:19:42+00:00 | . So - less than a day old. Not bad for a data source that is freely available and maintained by a 3rd party (not me, laziness !) . Fetch data . Let&#39;s fetch the data now. . query = &quot;&quot;&quot; SELECT title, id, timestamp FROM bigquery-public-data.hacker_news.full WHERE type = &#39;story&#39; AND title IS NOT NULL; &quot;&quot;&quot; # Set up the query query_job = client.query(query) # API request - run the query, and return a pandas DataFrame df_stories = query_job.to_dataframe() df_stories.shape . This query will run for a little longer but no longer than 10 minutes. Remember, we are getting all the HN stories that have a title and there are about 3M of them at time of this writing. Patience ! . Here&#39;s the output: (3524454, 3) . Naice (: We&#39;ve got &gt; 3.5 million stories to play with ! And for each of them we have - a HN id, a timestamp and a title. . Save data . Let&#39;s save our hard work locally i.e. inside the Kaggle working directory. . import pickle with open(&#39;hn.stories.dt.pickle&#39;, &#39;wb&#39;) as outf: pickle.dump(df_stories, outf) . Check our work: !ls -al --block-size=M *.pickle . Output: -rw-r--r-- 1 root root 250M May 20 16:10 hn.stories.dt.pickle . Thats good. Sweet 250 mega bytes of HN news data. . A nifty little trick . Here&#39;s a nifty trick that I had promised - to create a cute little download link! . from IPython.display import FileLink FileLink(r&#39;hn.stories.dt.pickle&#39;) . Output: hn.stories.dt.pickle . The output is a hyperlink to your pickle file. Use wget or your favorite download manager to get that file onto your data processing machine. I have used an AWS EC2 instance for further work. So lets say bye to Kaggle and hello to EC2. See you there - in the next blog post! .",
            "url": "https://pushkarparanjpe.github.io/kidepaha_fastpages/hn/google/chrome/extension/unsupervised/ml/2020/05/20/HackerMark-get-data.html",
            "relUrl": "/hn/google/chrome/extension/unsupervised/ml/2020/05/20/HackerMark-get-data.html",
            "date": " • May 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "HackerMark - a Google Chrome extension for HackerNews",
            "content": "What is HN ? . HackerNews, or more popularly referred to by its initials as simply HN, is this amazing NEWS resource hosted at https://news.ycombinator.com/. Users (&quot;hackers&quot;) submit NEWS items on topics interesting to themselves and other users. Items can be voted up/down and commented upon by member users. Its like reddit but without the group-by-topic organisation that is encouraged by sub-reddits. . Introducing HackerMark . A Google Chrome Extension that annotates each HN item with a tag. A screenshot: A [tag] is displayed under news item. In future versions, each tag will get a distinct color. . Components of the build . HN data | Unsupervised machine learning model | Ontology of tags | Tagger function | Backend and its API | Deploying to AWS | Google Chrome extension | . This will be a multi-part series of posts in which I will explain in detail - how I built and shipped HackerMark. Here is part-1. .",
            "url": "https://pushkarparanjpe.github.io/kidepaha_fastpages/hn/google/chrome/extension/unsupervised/ml/2020/05/19/Google-Chome-extension-for-HackerNews.html",
            "relUrl": "/hn/google/chrome/extension/unsupervised/ml/2020/05/19/Google-Chome-extension-for-HackerNews.html",
            "date": " • May 19, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pushkarparanjpe.github.io/kidepaha_fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". Pushkar Paranjpe is a researcher in the Big Data and Data Sciences dept. of Star India Pvt. Ltd. He is interested in OSS, machine learning, 3d printing, electronics, robots and startups. This is a place to document his side projects. When not in a lockdown mode - he likes: cycling and swimming. He also enjoys reading, playing PC / PS4 games / chess / board games. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://pushkarparanjpe.github.io/kidepaha_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pushkarparanjpe.github.io/kidepaha_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}